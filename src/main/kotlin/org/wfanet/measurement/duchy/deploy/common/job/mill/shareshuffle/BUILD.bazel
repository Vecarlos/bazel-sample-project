load("@rules_java//java:defs.bzl", "java_binary")
load("@wfa_rules_kotlin_jvm//kotlin:defs.bzl", "kt_jvm_library")
load("//build/platforms:constraints.bzl", "DISTROLESS_JAVA")
load("//src/main/docker:macros.bzl", "java_image")

package(default_testonly = True)  #TODO: delete when InMemoryKeyStore and FakeHybridCipher are not used.

kt_jvm_library(
    name = "honest_majority_share_shuffle_mill_job",
    srcs = [
        "HonestMajorityShareShuffleMillFlags.kt",
        "HonestMajorityShareShuffleMillJob.kt",
    ],
    visibility = ["//src/main/kotlin/org/wfanet/measurement/duchy/deploy:__subpackages__"],
    deps = [],
)

kt_jvm_library(
    name = "forwarded_storage_honest_majority_share_shuffle_mill_job",
    srcs = ["ForwardedStorageHonestMajorityShareShuffleMillJob.kt"],
    deps = [],
)

# java_binary(
#     name = "ForwardedStorageHonestMajorityShareShuffleMillJob",
#     main_class = "org.wfanet.measurement.duchy.deploy.common.job.mill.shareshuffle.ForwardedStorageHonestMajorityShareShuffleMillJobKt",
#     runtime_deps = [":forwarded_storage_honest_majority_share_shuffle_mill_job"],
# )

# java_image(
#     name = "forwarded_storage_honest_majority_share_shuffle_mill_job_image",
#     binary = ":ForwardedStorageHonestMajorityShareShuffleMillJob",
#     main_class = "org.wfanet.measurement.duchy.deploy.common.job.mill.shareshuffle.ForwardedStorageHonestMajorityShareShuffleMillJobKt",
#     target_compatible_with = DISTROLESS_JAVA,
#     visibility = ["//src:docker_image_deployment"],
# )
