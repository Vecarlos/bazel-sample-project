name: Create Issue with Security Report

on:
  workflow_dispatch:
    inputs:
      issue_title:
        description: "Alert code"
        required: true
        default: ""

jobs:
  create-security-report-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      security-events: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get and Process Alerts
        id: get_alerts
        uses: ./.github/actions/process-alerts
        with:
          alert_input: ${{ github.event.inputs.issue_title }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          my_pat: ${{ secrets.MY_PAT }}

      - name: Create issue with formatted report
        env:
          ISSUE_TITLE: ${{ steps.get_alerts.outputs.issue_title }}
          ISSUE_BODY: ${{ steps.get_alerts.outputs.issue_body }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          json_payload=$(jq -n \
            --arg title "$ISSUE_TITLE" \
            --arg body "$ISSUE_BODY" \
            '{title: $title, body: $body}')
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/issues \
            --header "Authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data "$json_payload" \
            --fail

      # --- PASO NUEVO: Generar el reporte visual en el log ---
      - name: Generate Visual Status Report
        # Este paso siempre se ejecuta para darte el estado actual
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MY_PAT }} # Usamos el PAT para tener acceso a ambas APIs
          script: |
            // Función para buscar si existe un issue con un título específico
            async function issueExists(title) {
              const query = `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open in:title "${title}"`;
              const result = await github.rest.search.issuesAndPullRequests({ q: query });
              return result.data.total_count > 0;
            }

            // --- Reporte de Alertas de Code Scanning (CWEs) ---
            core.startGroup('--- Status Report: Code Scanning Alerts (CWEs) ---');
            const codeScanningAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            if (codeScanningAlerts.data.length === 0) {
              core.info('✅ No open Code Scanning alerts.');
            } else {
              for (const alert of codeScanningAlerts.data) {
                const cweTag = alert.rule.tags.find(tag => tag.startsWith('external/cwe/cwe-'));
                if (cweTag) {
                  const cweId = cweTag.split('/').pop().toUpperCase();
                  const potentialTitle = `Fix code scanning alert - ${cweId} - ${alert.rule.description}`;
                  if (await issueExists(potentialTitle)) {
                    core.info(`✅ [SEGUIDA] - ${cweId}: ${alert.rule.description}`);
                  } else {
                    core.info(`ℹ️ [SIN SEGUIMIENTO] - ${cweId}: ${alert.rule.description}`);
                  }
                }
              }
            }
            core.endGroup();

            // --- Reporte de Alertas de Dependabot (CVEs) ---
            core.startGroup('--- Status Report: Dependabot Alerts (CVEs) ---');
            const dependabotAlerts = await github.rest.dependabot.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            if (dependabotAlerts.data.length === 0) {
              core.info('✅ No open Dependabot alerts.');
            } else {
              for (const alert of dependabotAlerts.data) {
                const cveId = alert.security_advisory.cve_id;
                const potentialTitle = `Fix code scanning alert - ${cveId} - ${alert.security_advisory.summary}`;
                if (await issueExists(potentialTitle)) {
                  core.info(`✅ [SEGUIDA] - ${cveId}: ${alert.security_advisory.summary}`);
                } else {
                  core.info(`ℹ️ [SIN SEGUIMIENTO] - ${cveId}: ${alert.security_advisory.summary}`);
                }
              }
            }
            core.endGroup();
