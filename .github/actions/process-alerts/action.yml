name: 'Process Security Alerts'
description: 'Fetches and processes security alerts (CWE or CVE) and prepares an issue title and body.'

inputs:
  alert_input:
    description: 'The alert code to process'
    required: true
  my_pat:
    description: 'A personal access token (PAT) for the Dependabot API.'
    required: true

outputs:
  issue_title:
    description: 'The generated title for the issue.'
    value: ${{ steps.process.outputs.issue_title }}
  issue_body:
    description: 'The generated body for the issue.'
    value: ${{ steps.process.outputs.issue_body }}

runs:
  using: "composite"
  steps:
    - id: process
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.my_pat }}
        script: |
          const alertInput = '${{ inputs.alert_input }}';
          const lowercaseInput = alertInput.toLowerCase();
          const uppercaseInput = alertInput.toUpperCase();
          
          let issueTitle = '';
          let issueBody = '';
          try {
            if (lowercaseInput.startsWith('cwe-')) {
              const cweTagToFind = `external/cwe/${lowercaseInput}`;
              
              console.log(`Searching for Code Scanning alerts with tag: ${cweTagToFind}`);
              const allAlerts = await github.paginate(github.rest.codeScanning.listAlertsForRepo, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });

              const filteredAlerts = allAlerts.filter(alert => 
                alert.rule.tags && alert.rule.tags.some(tag => tag.toLowerCase() === cweTagToFind)
              );
              console.log(`Found ${filteredAlerts.length} matching CWE alerts.`);

              if (filteredAlerts.length > 0) {
                const description = filteredAlerts[0].rule.description;
                issueTitle = `Fix code scanning alert - ${uppercaseInput} - ${description}`;
                const cweNumber = lowercaseInput.split('-')[1];
                const alertLink = `[${uppercaseInput}](https://cwe.mitre.org/data/definitions/${cweNumber}.html)`;
                const locationList = filteredAlerts.map(alert => 
                  `- [${alert.most_recent_instance.location.path}:${alert.most_recent_instance.location.start_line}](${alert.html_url})`
                ).join('\n');
                issueBody = `${alertLink}\n\nTracking issue for:\n\n${locationList}`;
              } else {
                issueTitle = `No alerts found for ${uppercaseInput}`;
                issueBody = `No open vulnerabilities found for ${uppercaseInput}.`;
              }
              
            } else if (lowercaseInput.startsWith('cve-')) {
              console.log(`Searching for Dependabot alerts with CVE: ${lowercaseInput}`);
              const allAlerts = await github.paginate(github.rest.dependabot.listAlertsForRepo, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });

              const filteredAlerts = allAlerts.filter(alert => 
                alert.security_advisory.cve_id && alert.security_advisory.cve_id.toLowerCase() === lowercaseInput
              );
              console.log(`Found ${filteredAlerts.length} matching CVE alerts.`);
              
              if (filteredAlerts.length > 0) {
                const description = filteredAlerts[0].security_advisory.summary;
                issueTitle = `Fix dependabot alert - ${uppercaseInput} - ${description}`;
                const alertLink = `[${uppercaseInput}](https://nvd.nist.gov/vuln/detail/${uppercaseInput})`;
                const locationList = filteredAlerts.map(alert => 
                  `- [${alert.dependency.package.name} at ${alert.dependency.manifest_path}](${alert.html_url})`
                ).join('\n');
                issueBody = `${alertLink}\n\nTracking issue for:\n\n${locationList}`;
              } else {
                issueTitle = `No alerts found for ${uppercaseInput}`;
                issueBody = `No open vulnerabilities found for ${uppercaseInput}.`;
              }

            } else {
              issueTitle = 'Invalid Input';
              issueBody = 'Input must be CWE or CVE.';
            }
          } catch {
              core.setFailed(`Action failed with error: ${error.message}`);
              issueTitle = 'Error during action execution';
              issueBody = `An error occurred while fetching alerts: ${error.message}`;
          }
          core.setOutput('issue_title', issueTitle);
          core.setOutput('issue_body', issueBody);