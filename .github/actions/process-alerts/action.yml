name: "Process Security Alerts"
description: "Fetches and processes security alerts (CWE or CVE) and prepares an issue title and body."

inputs:
  alert_input:
    description: "The alert code to process"
    required: true
  gh_token:
    description: "The GH_TOKEN for API calls."
    required: true
  my_pat:
    description: "A personal access token (PAT) for the Dependabot API."
    required: true

outputs:
  issue_title:
    description: "The generated title for the issue."
    value: ${{ steps.process_alerts.outputs.issue_title }}
  issue_body:
    description: "The generated body for the issue."
    value: ${{ steps.process_alerts.outputs.issue_body }}

runs:
  using: "composite"
  steps:
    - id: process
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.my_pat }}
        script: |
          const alertInput = '${{ inputs.alert_input }}';
          const lowercaseInput = alertInput.toLowerCase();
          const uppercaseInput = alertInput.toUpperCase();
          
          if (lowercaseInput.startsWith('cwe-')) {
            const cweTagToFind = `external/${lowercaseInput}`;
            
            const allAlerts = await github.paginate(github.rest.codeScanning.listAlertsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const filteredAlerts = allAlerts.filter(alert => 
              alert.rule.tags && alert.rule.tags.some(tag => tag.toLowerCase() === cweTagToFind)
            );

            if (filteredAlerts.length > 0) {
              const description = filteredAlerts[0].rule.description;
              const issueTitle = `Fix code scanning alert - ${uppercaseInput} - ${description}`;
              const cweNumber = lowercaseInput.split('-')[1];
              const alertLink = `[${uppercaseInput}](https://cwe.mitre.org/data/definitions/${cweNumber}.html)`;
              const locationList = filteredAlerts.map(alert => 
                `- [${alert.most_recent_instance.location.path}:${alert.most_recent_instance.location.start_line}](${alert.html_url})`
              ).join('\n');
              const issueBody = `${alertLink}\n\nTracking issue for:\n\n${locationList}`;
              core.setOutput('issue_title', issueTitle);
              core.setOutput('issue_body', issueBody);
            } else {
              core.setOutput('issue_title', `No alerts found for ${uppercaseInput}`);
              core.setOutput('issue_body', `No open vulnerabilities found for ${uppercaseInput}.`);
            }
            
          } else if (lowercaseInput.startsWith('cve-')) {
          
            const allAlerts = await github.paginate(github.rest.dependabot.listAlertsForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const filteredAlerts = allAlerts.filter(alert => 
              alert.security_advisory.cve_id && alert.security_advisory.cve_id.toLowerCase() === lowercaseInput
            );
            
            if (filteredAlerts.length > 0) {
              const description = filteredAlerts[0].security_advisory.summary;
              const issueTitle = `Fix dependabot alert - ${uppercaseInput} - ${description}`;
              const alertLink = `[${uppercaseInput}](https://nvd.nist.gov/vuln/detail/${uppercaseInput})`;
              const locationList = filteredAlerts.map(alert => 
                `- [${alert.dependency.package.name} at ${alert.dependency.manifest_path}](${alert.html_url})`
              ).join('\n');
              const issueBody = `${alertLink}\n\nTracking issue for:\n\n${locationList}`;
              core.setOutput('issue_title', issueTitle);
              core.setOutput('issue_body', issueBody);
            } else {
              core.setOutput('issue_title', `No alerts found for ${uppercaseInput}`);
              core.setOutput('issue_body', `No open vulnerabilities found for ${uppercaseInput}.`);
            }

          } else {
            core.setOutput('issue_title', 'Invalid Input');
            core.setOutput('issue_body', 'Input must be CWE or CVE.');
          }