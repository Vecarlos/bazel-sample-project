name: 'Generate Security Dashboard HTML'
description: 'Generates an index.html file with a report of all open security alerts.'
inputs:
  my_pat:
    description: 'A PAT with security_events and search read permissions.'
    required: true
outputs:
  html_report:
    description: "The generated HTML content for the dashboard."
    value: ${{ steps.generate_report.outputs.report_html }}
runs:
  using: "composite"
  steps:
    - name: Generate HTML Content
      id: generate_report
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.my_pat }}
        script: |
          async function findTrackingIssueUrl(title) {
            const query = `repo:${process.env.GITHUB_REPOSITORY} is:issue is:open in:title "${title}"`;
            const result = await github.rest.search.issuesAndPullRequests({ q: query, advanced_search: true });
            if (result.data.total_count > 0) {
              return result.data.items[0].html_url;
            }
            return null;
          }
          
          const repoFullName = `${context.repo.owner}/${context.repo.repo}`;
          const createIssueForm = `
            <div class="issue-creator">
              <h4>Create New Issue</h4>
              <p>Alert Issue</p>
              <input type="text" id="alertCodeInput" placeholder="">
              <button onclick="runWorkflow()">Go to workflow</button>
            </div>
          `;
          const createIssueScript = `
            <script>
              function runWorkflow() {
                const alertCode = document.getElementById('alertCodeInput').value;
                if (!alertCode) {
                  alert('Please enter a CWE or CVE code.');
                  return;
                }
                const baseUrl = 'https://github.com/${repoFullName}/actions/workflows/code-security-issue.yml?ref=main&inputs[issue_title]=';
                const workflowUrl = baseUrl + encodeURIComponent(alertCode);
                window.open(workflowUrl, '_blank');
              }
            </script>
          `;

          let codeQlHtml = "<h2>Code Scanning Alerts (CWEs)</h2><ul>";
          const codeScanningAlerts = await github.rest.codeScanning.listAlertsForRepo({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 100 });
          if (codeScanningAlerts.data.length === 0) {
            codeQlHtml += "<li>✅ No open Code Scanning alerts.</li>";
          } else {
            for (const alert of codeScanningAlerts.data) {
              const cweTag = alert.rule.tags.find(t => t.startsWith('external/cwe/cwe-'));
              if (cweTag) {
                const cweId = cweTag.split('/').pop().toUpperCase();
                const potentialTitle = `Fix code scanning alert - ${cweId} - ${alert.rule.description}`;
                const issueUrl = await findTrackingIssueUrl(potentialTitle);
                let statusHtml = '<b>ℹ️ Not Tracked</b>';
                if (issueUrl) {
                  statusHtml = `<b>✅ <a href="${issueUrl}">Tracked</a></b>`;
                }
                codeQlHtml += `<li>${statusHtml} - <a href="${alert.html_url}">${cweId}: ${alert.rule.description}</a></li>`;
              }
            }
          }
          codeQlHtml += "</ul>";

          let dependabotHtml = "<h2>Dependabot Alerts (CVEs)</h2><ul>";
          const dependabotAlerts = await github.rest.dependabot.listAlertsForRepo({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 100 });
          if (dependabotAlerts.data.length === 0) {
            dependabotHtml += "<li>✅ No open Dependabot alerts.</li>";
          } else {
            for (const alert of dependabotAlerts.data) {
              const cveId = alert.security_advisory.cve_id;
              const potentialTitle = `Fix code scanning alert - ${cveId} - ${alert.security_advisory.summary}`;
              const issueUrl = await findTrackingIssueUrl(potentialTitle);
              let statusHtml = '<b>ℹ️ Not Tracked</b>';
              if (issueUrl) {
                statusHtml = `<b>✅ <a href="${issueUrl}">Tracked</a></b>`;
              }
              dependabotHtml += `<li>${statusHtml} - <a href="${alert.html_url}">${cveId}: ${alert.security_advisory.summary}</a></li>`;
            }
          }
          dependabotHtml += "</ul>";

          const finalHtml = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Security Dashboard</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif; line-height: 1.6; padding: 20px; }
                  h1, h2, h3, h4 { border-bottom: 1px solid #ccc; padding-bottom: 10px; }
                  ul { list-style-type: none; padding-left: 0; }
                  li { margin-bottom: 10px; }
                  b { font-weight: bold; }
                  a { text-decoration: none; color: #0969da; }
                  a:hover { text-decoration: underline; }
                  .footer { margin-top: 30px; font-size: 0.8em; color: #666; }
                  .issue-creator {
                    border: 1px solid #ddd;
                    padding: 15px;
                    border-radius: 6px;
                    margin-bottom: 20px;
                    background-color: #f6f8fa;
                  }
                  .issue-creator input[type="text"] {
                    padding: 8px;
                    border: 1px solid #ccc;
                    border-radius: 6px;
                    width: 300px;
                  }
                  .issue-creator button {
                    padding: 8px 15px;
                    font-size: 14px;
                    color: white;
                    background-color: #238636;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                    margin-left: 5px;
                  }
                  .issue-creator button:hover {
                    background-color: #2ea043;
                  }
              </style>
          </head>
          <body>
              <h1>Security Status Dashboard</h1>
              ${createIssueForm}
              <p class="footer">Last updated: ${new Date().toUTCString()}</p>
              ${codeQlHtml}
              ${dependabotHtml}
          </body>
          </html>`;
          
          core.setOutput('report_html', finalHtml);