name: 'Generate Security Dashboard HTML'
description: 'Generates an index.html file with a report of all open security alerts.'
inputs:
  my_pat:
    description: 'A PAT with security_events and search read permissions.'
    required: true
outputs:
  html_report:
    description: "The generated HTML content for the dashboard."
    value: ${{ steps.generate_report.outputs.report_html }}
runs:
  using: "composite"
  steps:
    - name: Generate HTML Content
      id: generate_report
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.my_pat }}
        script: |
          async function findTrackingIssueUrl(title) {
            const query = `repo:${process.env.GITHUB_REPOSITORY} is:issue is:open in:title "${title}"`;
            const result = await github.rest.search.issuesAndPullRequests({ q: query, advanced_search: true });
            if (result.data.total_count > 0) {
              return result.data.items[0].html_url;
            }
            return null;
          }
          
          const repoFullName = `${context.repo.owner}/${context.repo.repo}`;
          const createIssueButton = `
            <div class="issue-creator">
              <a href="https://github.com/${repoFullName}/actions/workflows/code-security-issue.yml" class="button">Go to Workflow</a>
            </div>
          `;

          let cweData = [];
          try {
            const codeScanningAlerts = await github.paginate(github.rest.codeScanning.listAlertsForRepo, { 
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              per_page: 100 
            });
            for (const alert of codeScanningAlerts) {
              const cweTag = alert.rule.tags.find(t => t.startsWith('external/cwe/cwe-'));
              if (cweTag) {
                const cweId = cweTag.split('/').pop().toUpperCase();
                const potentialTitle = `Fix code scanning alert - ${cweId} - ${alert.rule.description}`;
                const issueUrl = await findTrackingIssueUrl(potentialTitle);
                cweData.push({
                  id: cweId, description: alert.rule.description, html_url: alert.html_url,
                  tracked: !!issueUrl, issue_url: issueUrl
                });
              }
            }
            cweData.sort((a, b) => a.id.localeCompare(b.id)); 
          } catch (error) {
            core.error(`Error fetching Code Scanning alerts: ${error.message}`);
            cweData = [{ id: 'ERROR', description: `Failed to fetch alerts: ${error.message}` }];
          }
          
          let cveData = [];
          try {
            const dependabotAlerts = await github.paginate(github.rest.dependabot.listAlertsForRepo, { 
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              state: 'open', 
              per_page: 100 
            });
            for (const alert of dependabotAlerts) {
              const cveId = alert.security_advisory.cve_id;
              const potentialTitle = `Fix dependabot alert - ${cveId} - ${alert.security_advisory.summary}`;
              const issueUrl = await findTrackingIssueUrl(potentialTitle);
              cveData.push({
                id: cveId, description: alert.security_advisory.summary, html_url: alert.html_url,
                tracked: !!issueUrl, issue_url: issueUrl
              });
            }
            cveData.sort((a, b) => a.id.localeCompare(b.id));
          } catch (error) {
            core.error(`Error fetching Dependabot alerts: ${error.message}`);
            cveData = [{ id: 'ERROR', description: `Failed to fetch alerts: ${error.message}` }];
          }

          const finalHtml = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Security Dashboard</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif; line-height: 1.6; padding: 20px; }
                  h1, h2 { border-bottom: 1px solid #ccc; padding-bottom: 10px; }
                  ul { list-style-type: none; padding-left: 0; min-height: 120px; }
                  li { margin-bottom: 10px; display: flex; align-items: center; justify-content: space-between; padding: 8px; border-left: 3px solid #f0f6fc; }
                  li:hover { background-color: #f6f8fa; }
                  b { font-weight: bold; }
                  a { text-decoration: none; color: #0969da; }
                  a:hover { text-decoration: underline; }
                  .footer { margin-top: 30px; font-size: 0.8em; color: #666; }
                  .issue-creator { padding: 15px; margin-bottom: 20px; }
                  .button { display: inline-block; padding: 8px 15px; font-size: 14px; font-weight: 500; color: white; background-color: #238636; border: none; border-radius: 6px; cursor: pointer; }
                  .button:hover { background-color: #2ea043; }
                  .pagination { display: flex; align-items: center; justify-content: center; gap: 15px; margin-top: 15px; }
                  .pagination button { background: #f6f8fa; border: 1px solid #d1d9e0; border-radius: 6px; cursor: pointer; padding: 5px 10px; }
                  .pagination button:disabled { opacity: 0.5; cursor: not-allowed; }
                  .copy-btn { padding: 4px 8px; font-size: 12px; margin-left: 15px; background-color: #f6f8fa; color: #24292f; border: 1px solid #d1d9e0; cursor: pointer; border-radius: 6px; }
              </style>
          </head>
          <body>
              <h1>Security Status Dashboard</h1>
              ${createIssueButton}
              <p class="footer">Last updated: ${new Date().toUTCString()}</p>
              
              <h2>Code Scanning Alerts (CWEs)</h2>
              <ul id="cwe-list"></ul>
              <div class="pagination">
                <button id="cwe-prev" onclick="changeCwePage(-1)">&lt;</button>
                <span id="cwe-page-info"></span>
                <button id="cwe-next" onclick="changeCwePage(1)">&gt;</button>
              </div>

              <h2>Dependabot Alerts (CVEs)</h2>
              <ul id="cve-list"></ul>
              <div class="pagination">
                <button id="cve-prev" onclick="changeCvePage(-1)">&lt;</button>
                <span id="cve-page-info"></span>
                <button id="cve-next" onclick="changeCvePage(1)">&gt;</button>
              </div>

              <script>
                const cweAlerts = ${JSON.stringify(cweData)};
                const cveAlerts = ${JSON.stringify(cveData)};
                const ITEMS_PER_PAGE = 3;

                let currentCwePage = 1;
                let currentCvePage = 1;

                function copyToClipboard(text, buttonElement) {
                  const textArea = document.createElement("textarea");
                  textArea.value = text;
                  document.body.appendChild(textArea);
                  textArea.select();
                  try {
                    document.execCommand('copy');
                    buttonElement.textContent = 'Copied!';
                    setTimeout(() => { buttonElement.textContent = 'Copy CLI'; }, 2000);
                  } catch (err) {
                    console.error('Fallback: Oops, unable to copy', err);
                  }
                  document.body.removeChild(textArea);
                }

                function renderPage(alertData, listElementId, pageInfoElementId, currentPage) {
                  const list = document.getElementById(listElementId);
                  const pageInfo = document.getElementById(pageInfoElementId);
                  list.innerHTML = '';
                  
                  if (alertData.length === 0) {
                    list.innerHTML = "<li>✅ No open alerts.</li>";
                    pageInfo.textContent = "Page 1 of 1";
                    document.getElementById(listElementId.replace('-list', '-prev')).disabled = true;
                    document.getElementById(listElementId.replace('-list', '-next')).disabled = true;
                    return;
                  }

                  const totalPages = Math.ceil(alertData.length / ITEMS_PER_PAGE);
                  const start = (currentPage - 1) * ITEMS_PER_PAGE;
                  const end = start + ITEMS_PER_PAGE;
                  const paginatedItems = alertData.slice(start, end);

                  for (const alert of paginatedItems) {
                    let statusHtml = alert.tracked ? '<b>✅ <a href="' + alert.issue_url + '">Tracked</a></b>' : '<b>ℹ️ Not Tracked</b>';
                    const commandToCopy = 'gh workflow run code-security-issue.yml -f issue_title="' + alert.id + '"';
                    
                    const li = document.createElement('li');
                    
                    const contentDiv = document.createElement('div');
                    contentDiv.innerHTML = statusHtml + ' - <a href="' + alert.html_url + '">' + alert.id + ': ' + alert.description + '</a>';
                    li.appendChild(contentDiv);
                    
                    if (alert.tracked) {
                    const copyButton = document.createElement('button');
                    copyButton.className = 'copy-btn';
                    copyButton.textContent = 'Copy CLI';
                    copyButton.onclick = () => copyToClipboard(commandToCopy, copyButton);
                    li.appendChild(copyButton);
                    }

                    list.appendChild(li);
                  }
                  
                  pageInfo.textContent = 'Page ' + currentPage + ' of ' + totalPages;
                  document.getElementById(listElementId.replace('-list', '-prev')).disabled = currentPage === 1;
                  document.getElementById(listElementId.replace('-list', '-next')).disabled = currentPage === totalPages;
                }

                function changeCwePage(direction) {
                  const totalPages = Math.ceil(cweAlerts.length / ITEMS_PER_PAGE);
                  const newPage = currentCwePage + direction;
                  if (newPage >= 1 && newPage <= totalPages) {
                    currentCwePage = newPage;
                    renderPage(cweAlerts, 'cwe-list', 'cwe-page-info', currentCwePage);
                  }
                }

                function changeCvePage(direction) {
                  const totalPages = Math.ceil(cveAlerts.length / ITEMS_PER_PAGE);
                  const newPage = currentCvePage + direction;
                  if (newPage >= 1 && newPage <= totalPages) {
                    currentCvePage = newPage;
                    renderPage(cveAlerts, 'cve-list', 'cve-page-info', currentCvePage);
                  }
                }

                document.addEventListener('DOMContentLoaded', () => {
                  renderPage(cweAlerts, 'cwe-list', 'cwe-page-info', 1);
                  renderPage(cveAlerts, 'cve-list', 'cve-page-info', 1);
                });
              </script>
          </body>
          </html>`;
          
          core.setOutput('report_html', finalHtml);
