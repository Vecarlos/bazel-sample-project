module(
    name = "bazel-sample-project",
    repo_name = "vecarlos",
)

bazel_dep(
    name = "rules_kotlin_jvm",
    version = "0.6.0",
    repo_name = "wfa_rules_kotlin_jvm",
)

bazel_dep(
    name = "rules_cue",
    version = "0.4.0",
    repo_name = "wfa_rules_cue",
)

bazel_dep(
    name = "common-jvm",
    version = "0.103.0",
    repo_name = "wfa_common_jvm",
)

# --- Bazel Central Registry modules. ---
bazel_dep(
    name = "bazel_skylib",
    version = "1.7.1",
)
bazel_dep(
    name = "rules_proto",
    version = "7.1.0",
)

bazel_dep(
    name = "rules_cc",
    version = "0.1.1",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.0.1",
)
bazel_dep(
    name = "rules_java",
    version = "8.7.1",
)

bazel_dep(
    name = "rules_jvm_external",
    version = "6.6",
)
bazel_dep(
    name = "rules_python",
    version = "1.1.0",
)

bazel_dep(
    name = "protobuf",
    version = "29.3",
    repo_name = "com_google_protobuf",
)

bazel_dep(
    name = "googletest",
    version = "1.15.2",
    repo_name = "com_google_googletest",
)

bazel_dep(
    name = "googleapis",
    version = "0.0.0-20250120-318818b.bzlmod.2",
    repo_name = "com_google_googleapis",
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

maven.artifact(
    testonly = True,
    artifact = "mockito-core",
    group = "org.mockito",
    version = "5.12.0",
)

maven.artifact(
    testonly = True,
    artifact = "mockito-inline",
    group = "org.mockito",
    version = "5.2.0",
)

maven.artifact(
    testonly = True,
    artifact = "mockito-kotlin",
    group = "org.mockito.kotlin",
    version = "5.4.0",
)
maven.install(
    artifacts = [
        "io.grpc:grpc-netty-shaded:1.62.2",
        "io.grpc:grpc-okhttp:1.62.2",
        "io.grpc:grpc-kotlin-stub:1.4.1",
        "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3",
        
        "io.netty:netty-handler:4.1.91.Final",
    ],
    boms = [],
    fail_if_repin_required = True,
    fetch_sources = True,
    lock_file = "//:maven_install.json",
    resolver = "maven",
    strict_visibility = True,
)
use_repo(maven, "maven")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    ignore_root_user_error = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)
use_repo(pip, "pip")
pip.parse(
    hub_name = "pytype_pip",
    python_version = "3.11",
    requirements_lock = "//tools/pytype:pytype_requirements.txt",
)
use_repo(pip, "pytype_pip")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "ninja_build",
    build_file_content = """
filegroup(
    name = "ninja_binary",
    srcs = ["ninja"],
    visibility = ["//visibility:public"],
)
    """,
    sha256 = "b901ba96e486dce377f9a070ed4ef3f79deb45f4ffe2938f8e7ddc69cfb3df77",
    url = "https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip",
    strip_prefix = "",
)

http_archive(
    name = "io_grpc_grpc_proto",
    sha256 = "464e97a24d7d784d9c94c25fa537ba24127af5aae3edd381007b5b98705a0518",
    strip_prefix = "grpc-proto-08911e9d585cbda3a55eb1dcc4b99c89aebccff8",
    urls = ["https://github.com/grpc/grpc-proto/archive/08911e9d585cbda3a55eb1dcc4b99c89aebccff8.zip"],
)

java_toolchains = use_repo_rule("@rules_java//java:repositories.bzl", "java_toolchains")
java_toolchains(
    name = "remote_jdk_21",
    version = "21",
)

use_repo(java_toolchains, "remote_jdk_21")

# http_archive(
#     name = "codeql_cli",
#     build_file_content = """
# filegroup(
#     name = "codeql_binary",
#     srcs = glob(["**"]),
#     visibility = ["//visibility:public"],
# )
# """,
#     sha256 = "d3748d15014fa5c40dcd93201cf9b41ac52d621ffb256a0ee92fb1b6339f8305",
#     strip_prefix = "codeql",
#     urls = ["https://github.com/github/codeql-cli-binaries/releases/download/v2.18.0/codeql-linux64.zip"],
# )