actions:
  - name: "Test all targets"
    triggers:
      pull_request:
        branches:
          - "*"
    steps:
      - name: "Escribir auth.bazelrc"
        run: |
          cat << EOF > auth.bazelrc
          build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          EOF

      - name: "Escribir ~/.bazelrc"
        run: |
          cat << EOF > ~/.bazelrc
          common --config=ci
          build --remote_upload_local_results
          EOF

      - name: "Configurar TCP keepalive"
        run: sudo sysctl -w net.ipv4.tcp_keepalive_time=60

      - name: "Verificar lockfile de módulos Bazel"
        run: bazel mod deps

      - name: "Construir el proyecto"
        run: bazel build --worker_quit_after_build //...

      - name: "Pytype check"
        run: bazel run //tools/pytype:run-checks

      - name: "Prueba A: Test con RBE, SIN coverage"
        run: |
          echo "Ejecutando un test normal con Ejecución Remota..."
          bazel test //src/test/... --config=ci --test_output=streamed

      - name: "Ejecutar tests con cobertura"
        run: |
          bazel coverage --test_output=all --instrumentation_filter="-.*jacoco_exclusion" --combined_report=lcov //src/test/python/... | tee -a bazel_coverage.log || true

      - name: "Obtener ruta de salida de Bazel"
        run: echo "BAZEL_OUTPUT_PATH=$(bazel info output_path)" >> $BUILD_ENV

      - name: "Mover archivo de cobertura"
        run: mv $(bazel info output_path)/_coverage/_coverage_report.dat lcov.info

      - name: "Subir reportes de cobertura a Codecov"
        run: |
          # Asegúrate de que el CLI de Codecov esté disponible en el entorno del runner.
          # Por ejemplo, si tienes el ejecutable 'codecov' en tu PATH:
          codecov -t ${{ secrets.CODECOV_TOKEN }} --slug vecarlos/bazel-sample-project --file lcov.info
          # Si necesitas instalarlo, puedes añadir un paso previo para descargar y configurar el CLI.
