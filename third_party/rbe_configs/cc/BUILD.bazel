load(":cc_toolchain_config.bzl", "cc_toolchain_config")
load("@rules_cc//cc:defs.bzl", "cc_toolchain", "cc_toolchain_suite")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

filegroup(
    name = "empty",
    srcs = [],
)

filegroup(
    name = "cc_wrapper",
    srcs = ["cc_wrapper.sh"],
)

filegroup(
    name = "compiler_deps",
    srcs = glob(["extra_tools/**"], allow_empty = True) + [
        ":builtin_include_directory_paths",
        ":cc_wrapper",
    ],
)


cc_toolchain_suite(
    name = "toolchain",
    toolchains = {
        "k8|clang": ":cc-compiler-k8",
        "k8": ":cc-compiler-k8",
    },
)

cc_toolchain(
    name = "cc-compiler-k8",
    toolchain_identifier = "linux_gnu_x86",
    toolchain_config = ":linux_gnu_x86",
    all_files = ":compiler_deps",
    ar_files = ":compiler_deps",
    as_files = ":compiler_deps",
    compiler_files = ":compiler_deps",
    dwp_files = ":empty",
    linker_files = ":compiler_deps",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_header_parsing = 1,
    supports_param_files = 1,
    module_map = ":module.modulemap",
)

cc_toolchain_config(
    name = "linux_gnu_x86",
    cpu = "k8",
    compiler = "clang",
    toolchain_identifier = "linux_gnu_x86",
    host_system_name = "i686-unknown-linux-gnu",
    target_system_name = "x86_64-unknown-linux-gnu",
    target_libc = "glibc_2.19",
    abi_version = "clang",
    abi_libc_version = "glibc_2.19",
    cxx_builtin_include_directories = ["/usr/lib/llvm-14/lib/clang/14.0.6/include",
    "/usr/local/include",
    "/usr/include/x86_64-linux-gnu",
    "/usr/include",
    "/usr/lib/llvm-14/lib/clang/14.0.6/share",
    "/usr/include/c++/12",
    "/usr/include/x86_64-linux-gnu/c++/12",
    "/usr/include/c++/12/backward",
    "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"],
    tool_paths = {"ar": "/usr/bin/ar",
        "ld": "/usr/bin/ld",
        "llvm-cov": "/usr/bin/llvm-cov",
        "llvm-profdata": "/usr/bin/llvm-profdata",
        "cpp": "/usr/bin/cpp",
        "gcc": "/usr/lib/llvm-14/bin/clang",
        "dwp": "/usr/bin/dwp",
        "gcov": "/usr/bin/llvm-cov",
        "nm": "/usr/bin/nm",
        "objcopy": "/usr/bin/objcopy",
        "objdump": "/usr/bin/objdump",
        "strip": "/usr/bin/strip",
        "parse_headers": "cc_wrapper.sh"},
    compile_flags = ["-fstack-protector",
    "-Wall",
    "-Wthread-safety",
    "-Wself-assign",
    "-Wunused-but-set-parameter",
    "-Wno-free-nonheap-object",
    "-fcolor-diagnostics",
    "-fno-omit-frame-pointer"],
    opt_compile_flags = ["-g0",
    "-O2",
    "-D_FORTIFY_SOURCE=1",
    "-DNDEBUG",
    "-ffunction-sections",
    "-fdata-sections"],
    dbg_compile_flags = ["-g"],
    conly_flags = [],
    cxx_flags = ["-std=c++14"],
    link_flags = ["-fuse-ld=/usr/bin/ld.gold",
    "-B/usr/lib/llvm-14/bin",
    "-Wl,-no-as-needed",
    "-Wl,-z,relro,-z,now"],
    link_libs = ["-Wl,--push-state,-as-needed",
    "-lstdc++",
    "-Wl,--pop-state",
    "-Wl,--push-state,-as-needed",
    "-lm",
    "-Wl,--pop-state"],
    opt_link_flags = ["-Wl,--gc-sections"],
    unfiltered_compile_flags = ["-no-canonical-prefixes",
    "-Wno-builtin-macro-redefined",
    "-D__DATE__=\"redacted\"",
    "-D__TIMESTAMP__=\"redacted\"",
    "-D__TIME__=\"redacted\""],
    coverage_compile_flags = ["--coverage"],
    coverage_link_flags = ["--coverage"],
    supports_start_end_lib = True,
    extra_flags_per_feature = {"use_module_maps": ["-Xclang", "-fno-cxx-modules"]},
)

